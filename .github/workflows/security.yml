name: Security Scan

on:
  schedule:
    - cron: '0 2 * * 1'  # Run every Monday at 2 AM
  workflow_dispatch:
  push:
    branches: [ main ]

env:
  REGISTRY: ghcr.io

jobs:
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        module: [docker, sso, k8s]
        include:
          - module: docker
            java-version: '21'
          - module: sso
            java-version: '21'
          - module: k8s
            java-version: '22'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up JDK ${{ matrix.java-version }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java-version }}
          distribution: 'temurin'
          cache: maven
          
      - name: Run OWASP Dependency Check
        working-directory: ./${{ matrix.module }}
        run: |
          if [[ "${{ matrix.module }}" == "k8s" ]]; then
            ./mvnw org.owasp:dependency-check-maven:check
          else
            mvn org.owasp:dependency-check-maven:check
          fi
          
      - name: Upload dependency check results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: dependency-check-${{ matrix.module }}
          path: ${{ matrix.module }}/target/dependency-check-report.html

  code-scanning:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    
    permissions:
      actions: read
      contents: read
      security-events: write
      
    strategy:
      fail-fast: false
      matrix:
        language: [ 'java' ]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven
          
      - name: Build projects for analysis
        run: |
          # Build Docker module
          cd docker && mvn clean compile -DskipTests && cd ..
          
          # Build SSO module  
          cd sso && mvn clean compile -DskipTests && cd ..
          
      - name: Set up JDK 22 for K8s module
        uses: actions/setup-java@v4
        with:
          java-version: '22'
          distribution: 'temurin'
          cache: maven
          
      - name: Build K8s module
        run: |
          cd k8s && ./mvnw clean compile -DskipTests && cd ..
          
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  secret-scanning:
    name: Secret Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  license-check:
    name: License Compliance Check
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        module: [docker, sso, k8s]
        include:
          - module: docker
            java-version: '21'
          - module: sso
            java-version: '21'
          - module: k8s
            java-version: '22'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up JDK ${{ matrix.java-version }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java-version }}
          distribution: 'temurin'
          cache: maven
          
      - name: Check licenses
        working-directory: ./${{ matrix.module }}
        run: |
          if [[ "${{ matrix.module }}" == "k8s" ]]; then
            ./mvnw license:check
          else
            mvn license:check
          fi
          
      - name: Generate license report
        working-directory: ./${{ matrix.module }}
        run: |
          if [[ "${{ matrix.module }}" == "k8s" ]]; then
            ./mvnw license:aggregate-third-party-report
          else
            mvn license:aggregate-third-party-report
          fi
          
      - name: Upload license report
        uses: actions/upload-artifact@v3
        with:
          name: license-report-${{ matrix.module }}
          path: ${{ matrix.module }}/target/site/aggregate-third-party-report.html

  docker-security-scan:
    name: Docker Image Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/main'
    
    strategy:
      matrix:
        module: [docker, k8s]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build Docker image for scanning
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.module }}
          push: false
          tags: security-scan:${{ matrix.module }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: security-scan:${{ matrix.module }}
          format: 'sarif'
          output: 'trivy-results-${{ matrix.module }}.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results-${{ matrix.module }}.sarif'
          
      - name: Run Grype vulnerability scanner
        uses: anchore/scan-action@v3
        with:
          image: security-scan:${{ matrix.module }}
          fail-build: false
          output-format: sarif
          output-file: grype-results-${{ matrix.module }}.sarif
          
      - name: Upload Grype scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'grype-results-${{ matrix.module }}.sarif'

  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-scanning, secret-scanning, license-check, docker-security-scan]
    if: always()
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        
      - name: Generate summary report
        run: |
          echo "# Security Scan Summary" > security-report.md
          echo "" >> security-report.md
          echo "**Scan Date:** $(date)" >> security-report.md
          echo "**Repository:** ${{ github.repository }}" >> security-report.md
          echo "**Branch:** ${{ github.ref_name }}" >> security-report.md
          echo "" >> security-report.md
          
          echo "## Scan Results" >> security-report.md
          echo "" >> security-report.md
          
          # Check if dependency scan artifacts exist
          if ls dependency-check-* 1> /dev/null 2>&1; then
            echo "✅ Dependency vulnerability scan completed" >> security-report.md
          else
            echo "❌ Dependency vulnerability scan failed" >> security-report.md
          fi
          
          # Check if license reports exist
          if ls license-report-* 1> /dev/null 2>&1; then
            echo "✅ License compliance check completed" >> security-report.md
          else
            echo "❌ License compliance check failed" >> security-report.md
          fi
          
          echo "✅ CodeQL security analysis completed" >> security-report.md
          echo "✅ Secret scanning completed" >> security-report.md
          
          if ls trivy-results-* 1> /dev/null 2>&1; then
            echo "✅ Docker image vulnerability scan completed" >> security-report.md
          else
            echo "⚠️ Docker image vulnerability scan skipped" >> security-report.md
          fi
          
          echo "" >> security-report.md
          echo "## Next Steps" >> security-report.md
          echo "" >> security-report.md
          echo "1. Review the detailed scan reports in the workflow artifacts" >> security-report.md
          echo "2. Address any high or critical vulnerabilities found" >> security-report.md
          echo "3. Update dependencies with security patches" >> security-report.md
          echo "4. Review and validate license compliance" >> security-report.md
          
      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-summary-report
          path: security-report.md
          
      - name: Comment on PR if applicable
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('security-report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });

  notification:
    name: Send Security Notifications
    runs-on: ubuntu-latest
    needs: security-report
    if: always() && (failure() || contains(needs.*.result, 'failure'))
    
    steps:
      - name: Send Slack alert
        if: env.SLACK_WEBHOOK_URL != ''
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#security-alerts'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
          text: |
            🚨 Security scan failed for ${{ github.repository }}
            Please review the scan results and address any issues.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}